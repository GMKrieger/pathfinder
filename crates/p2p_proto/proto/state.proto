syntax = "proto3";
import "common.proto";

package starknet.state;

// optimized for flat storage, not through a trie (not sharing key prefixes)
message ContractStoredValue {
    starknet.common.Felt252 key   = 1;
    starknet.common.Felt252 value = 2;
}

message ContractDiff {
    starknet.common.Address          address     = 1;
    optional starknet.common.Felt252 nonce       = 2;  // Present only if the nonce was updated
    optional starknet.common.Felt252 class_hash  = 3;  // Present only if the contract was deployed or replaced in this block.
    optional bool                    is_replaced = 4;  // Present only if the contract was deployed or replaced, in order to determine whether the contract was deployed or replaced.
    repeated ContractStoredValue     values      = 5;
    uint32                           domain      = 6;  // volition state domain
}

message StateDiffsRequest {
    starknet.common.Iteration iteration = 1;
}

// Responses are sent ordered by the order given in the request.
message StateDiffsResponse {
    // All of the messages related to a block need to be sent before a message from the next block is sent.
    oneof state_diff_message {
        ContractDiff        contract_diff = 1; // Multiple contract diffs for the same contract may appear continuously if the diff is too large.
        starknet.common.Fin fin           = 2; // Fin is sent after the peer sent all the data or when it encountered a block that it doesn't have its state diff.
    }
}
